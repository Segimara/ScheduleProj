//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = "http://localhost:5000";

@Injectable({
    providedIn: 'root'
})
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    get(id: string): Observable<EventDetailsVM> {
        let url_ = this.baseUrl + "/api/Schedule/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EventDetailsVM>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EventDetailsVM>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<EventDetailsVM> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventDetailsVM.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EventDetailsVM>(null as any);
    }

    /**
     * @return Success
     */
    delete(id: string): Observable<string> {
        let url_ = this.baseUrl + "/api/Schedule/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }

    /**
     * @return Success
     */
    getList(from: Date, to: Date): Observable<EventListVM> {
        let url_ = this.baseUrl + "/api/Schedule/{From},{To}";
        if (from === undefined || from === null)
            throw new Error("The parameter 'from' must be defined.");
        url_ = url_.replace("{From}", encodeURIComponent(from ? "" + from.toISOString() : "null"));
        if (to === undefined || to === null)
            throw new Error("The parameter 'to' must be defined.");
        url_ = url_.replace("{To}", encodeURIComponent(to ? "" + to.toISOString() : "null"));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EventListVM>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EventListVM>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<EventListVM> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventListVM.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EventListVM>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: CreateEventDto | undefined): Observable<EventModel> {
        let url_ = this.baseUrl + "/api/Schedule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EventModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EventModel>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<EventModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EventModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: UpdateEventDto | undefined): Observable<EventModel> {
        let url_ = this.baseUrl + "/api/Schedule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EventModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EventModel>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<EventModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EventModel>(null as any);
    }
}

export class CreateEventDto implements ICreateEventDto {
    title?: string | undefined;
    description?: string | undefined;
    priotity?: number;
    dateTimeStart?: Date;
    dateTimeEnd?: Date;

    constructor(data?: ICreateEventDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
            this.priotity = _data["priotity"];
            this.dateTimeStart = _data["dateTimeStart"] ? new Date(_data["dateTimeStart"].toString()) : <any>undefined;
            this.dateTimeEnd = _data["dateTimeEnd"] ? new Date(_data["dateTimeEnd"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateEventDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateEventDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        data["priotity"] = this.priotity;
        data["dateTimeStart"] = this.dateTimeStart ? this.dateTimeStart.toISOString() : <any>undefined;
        data["dateTimeEnd"] = this.dateTimeEnd ? this.dateTimeEnd.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateEventDto {
    title?: string | undefined;
    description?: string | undefined;
    priotity?: number;
    dateTimeStart?: Date;
    dateTimeEnd?: Date;
}

export class EventDetailsVM implements IEventDetailsVM {
    id?: string;
    userId?: string;
    title?: string | undefined;
    description?: string | undefined;
    priotity?: number;
    dateTimeStart?: Date;
    dateTimeEnd?: Date;

    constructor(data?: IEventDetailsVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.priotity = _data["priotity"];
            this.dateTimeStart = _data["dateTimeStart"] ? new Date(_data["dateTimeStart"].toString()) : <any>undefined;
            this.dateTimeEnd = _data["dateTimeEnd"] ? new Date(_data["dateTimeEnd"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EventDetailsVM {
        data = typeof data === 'object' ? data : {};
        let result = new EventDetailsVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["title"] = this.title;
        data["description"] = this.description;
        data["priotity"] = this.priotity;
        data["dateTimeStart"] = this.dateTimeStart ? this.dateTimeStart.toISOString() : <any>undefined;
        data["dateTimeEnd"] = this.dateTimeEnd ? this.dateTimeEnd.toISOString() : <any>undefined;
        return data;
    }
}

export interface IEventDetailsVM {
    id?: string;
    userId?: string;
    title?: string | undefined;
    description?: string | undefined;
    priotity?: number;
    dateTimeStart?: Date;
    dateTimeEnd?: Date;
}

export class EventListDTO implements IEventListDTO {
    id?: string;
    userId?: string;
    title?: string | undefined;
    description?: string | undefined;
    priotity?: number;
    dateTimeStart?: Date;
    dateTimeEnd?: Date;

    constructor(data?: IEventListDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.priotity = _data["priotity"];
            this.dateTimeStart = _data["dateTimeStart"] ? new Date(_data["dateTimeStart"].toString()) : <any>undefined;
            this.dateTimeEnd = _data["dateTimeEnd"] ? new Date(_data["dateTimeEnd"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EventListDTO {
        data = typeof data === 'object' ? data : {};
        let result = new EventListDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["title"] = this.title;
        data["description"] = this.description;
        data["priotity"] = this.priotity;
        data["dateTimeStart"] = this.dateTimeStart ? this.dateTimeStart.toISOString() : <any>undefined;
        data["dateTimeEnd"] = this.dateTimeEnd ? this.dateTimeEnd.toISOString() : <any>undefined;
        return data;
    }
}

export interface IEventListDTO {
    id?: string;
    userId?: string;
    title?: string | undefined;
    description?: string | undefined;
    priotity?: number;
    dateTimeStart?: Date;
    dateTimeEnd?: Date;
}

export class EventListVM implements IEventListVM {
    listDTOs?: EventListDTO[] | undefined;

    constructor(data?: IEventListVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["listDTOs"])) {
                this.listDTOs = [] as any;
                for (let item of _data["listDTOs"])
                    this.listDTOs!.push(EventListDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EventListVM {
        data = typeof data === 'object' ? data : {};
        let result = new EventListVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listDTOs)) {
            data["listDTOs"] = [];
            for (let item of this.listDTOs)
                data["listDTOs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventListVM {
    listDTOs?: EventListDTO[] | undefined;
}

export class EventModel implements IEventModel {
    id?: string;
    userId?: string;
    title?: string | undefined;
    description?: string | undefined;
    priotity?: number;
    timestamp?: Date;
    state?: State;
    dateTimeStart?: Date;
    dateTimeEnd?: Date;

    constructor(data?: IEventModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.priotity = _data["priotity"];
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
            this.state = _data["state"];
            this.dateTimeStart = _data["dateTimeStart"] ? new Date(_data["dateTimeStart"].toString()) : <any>undefined;
            this.dateTimeEnd = _data["dateTimeEnd"] ? new Date(_data["dateTimeEnd"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EventModel {
        data = typeof data === 'object' ? data : {};
        let result = new EventModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["title"] = this.title;
        data["description"] = this.description;
        data["priotity"] = this.priotity;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        data["state"] = this.state;
        data["dateTimeStart"] = this.dateTimeStart ? this.dateTimeStart.toISOString() : <any>undefined;
        data["dateTimeEnd"] = this.dateTimeEnd ? this.dateTimeEnd.toISOString() : <any>undefined;
        return data;
    }
}

export interface IEventModel {
    id?: string;
    userId?: string;
    title?: string | undefined;
    description?: string | undefined;
    priotity?: number;
    timestamp?: Date;
    state?: State;
    dateTimeStart?: Date;
    dateTimeEnd?: Date;
}

export enum State {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class UpdateEventDto implements IUpdateEventDto {
    title?: string | undefined;
    description?: string | undefined;
    priotity?: number;
    dateTimeStart?: Date;
    dateTimeEnd?: Date;

    constructor(data?: IUpdateEventDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
            this.priotity = _data["priotity"];
            this.dateTimeStart = _data["dateTimeStart"] ? new Date(_data["dateTimeStart"].toString()) : <any>undefined;
            this.dateTimeEnd = _data["dateTimeEnd"] ? new Date(_data["dateTimeEnd"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateEventDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateEventDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        data["priotity"] = this.priotity;
        data["dateTimeStart"] = this.dateTimeStart ? this.dateTimeStart.toISOString() : <any>undefined;
        data["dateTimeEnd"] = this.dateTimeEnd ? this.dateTimeEnd.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateEventDto {
    title?: string | undefined;
    description?: string | undefined;
    priotity?: number;
    dateTimeStart?: Date;
    dateTimeEnd?: Date;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}